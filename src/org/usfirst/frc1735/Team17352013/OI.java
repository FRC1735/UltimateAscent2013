// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc1735.Team17352013;
import org.usfirst.frc1735.Team17352013.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick leftDrive;
    public Joystick rightDrive;
    public JoystickButton shootSequenceButton;
    public JoystickButton delivery;
    public JoystickButton shooterWheelsOn;
    public JoystickButton shooterWheelsOff;
    public JoystickButton hangButton;
    public JoystickButton beltReverseButton;
    public JoystickButton hangRelease;
    public Joystick operator;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        operator = new Joystick(3);
        
        hangRelease = new JoystickButton(operator, 6);
        hangRelease.whenReleased(new RetractHanger());
        beltReverseButton = new JoystickButton(operator, 5);
        beltReverseButton.whileHeld(new BeltReverse());
        hangButton = new JoystickButton(operator, 6);
        hangButton.whenPressed(new ExtendHanger());
        shooterWheelsOff = new JoystickButton(operator, 2);
        shooterWheelsOff.whenPressed(new ShooterOff());
        shooterWheelsOn = new JoystickButton(operator, 1);
        shooterWheelsOn.whenPressed(new ShooterOn());
        delivery = new JoystickButton(operator, 4);
        delivery.whileHeld(new BeltForward());
        shootSequenceButton = new JoystickButton(operator, 8);
        shootSequenceButton.whenPressed(new ShootSequence());
        rightDrive = new Joystick(2);
        
        leftDrive = new Joystick(1);
        
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("AutonomousMain", new AutonomousMain());
        SmartDashboard.putData("Drive with Joysticks", new DrivewithJoysticks());
        SmartDashboard.putData("DriveAuto", new DriveAuto());
        SmartDashboard.putData("Shooter On", new ShooterOn());
        SmartDashboard.putData("Shooter Off", new ShooterOff());
        SmartDashboard.putData("Belt Forward", new BeltForward());
        SmartDashboard.putData("Belt Forward Auto", new BeltForwardAuto());
        SmartDashboard.putData("Belt Reverse", new BeltReverse());
        SmartDashboard.putData("Deliver to Shooter", new DelivertoShooter());
        SmartDashboard.putData("Rotate Up", new RotateUp());
        SmartDashboard.putData("Rotate Down", new RotateDown());
        SmartDashboard.putData("ShootSequence", new ShootSequence());
        SmartDashboard.putData("ExtendHanger", new ExtendHanger());
        SmartDashboard.putData("AutonomousDispatcher", new AutonomousDispatcher());
        SmartDashboard.putData("RetractHanger", new RetractHanger());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        Robot.AutoMode.addDefault("Dead Reckoning", "0");
        Robot.AutoMode.addObject("Do Nothing", "1");
        SmartDashboard.putData("Automode", Robot.AutoMode);
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftDrive() {
        return leftDrive;
    }
    public Joystick getRightDrive() {
        return rightDrive;
    }
    public Joystick getOperator() {
        return operator;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
