// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc1735.Team17352013;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController shooterCIMMotor;
    public static Relay beltbBMotor;
    public static DoubleSolenoid rotatorRotator;
    public static DoubleSolenoid shooterDeliverShooterDelivery;
    public static SpeedController drivelineLeftCIMFront;
    public static SpeedController drivelineLeftCIMBack;
    public static SpeedController drivelineRightCIMFront;
    public static SpeedController drivelineRightCIMBack;
    public static RobotDrive drivelineRobotDrive;
    public static Compressor drivelineCompressor;
    public static DoubleSolenoid hangHanger;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        shooterCIMMotor = new Victor(1, 7);
	LiveWindow.addActuator("Shooter", "CIMMotor", (Victor) shooterCIMMotor);
        
        beltbBMotor = new Relay(1, 2);
	LiveWindow.addActuator("Belt", "bBMotor", beltbBMotor);
        
        rotatorRotator = new DoubleSolenoid(1, 5, 6);      
	
        
        shooterDeliverShooterDelivery = new DoubleSolenoid(1, 3, 4);      
	
        
        drivelineLeftCIMFront = new Victor(1, 1);
	LiveWindow.addActuator("Driveline", "Left CIM Front", (Victor) drivelineLeftCIMFront);
        
        drivelineLeftCIMBack = new Victor(1, 4);
	LiveWindow.addActuator("Driveline", "Left CIM Back", (Victor) drivelineLeftCIMBack);
        
        drivelineRightCIMFront = new Victor(1, 2);
	LiveWindow.addActuator("Driveline", "Right CIM Front", (Victor) drivelineRightCIMFront);
        
        drivelineRightCIMBack = new Victor(1, 3);
	LiveWindow.addActuator("Driveline", "Right CIM Back", (Victor) drivelineRightCIMBack);
        
        drivelineRobotDrive = new RobotDrive(drivelineLeftCIMFront, drivelineLeftCIMBack,
              drivelineRightCIMFront, drivelineRightCIMBack);
	
        drivelineRobotDrive.setSafetyEnabled(true);
        drivelineRobotDrive.setExpiration(0.1);
        drivelineRobotDrive.setSensitivity(0.5);
        drivelineRobotDrive.setMaxOutput(1.0);
        drivelineRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        drivelineRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        drivelineRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        drivelineRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        drivelineCompressor = new Compressor(1, 1, 1, 1);
	
        
        hangHanger = new DoubleSolenoid(1, 1, 2);      
	
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
